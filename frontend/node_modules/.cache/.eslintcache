[{"C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\index.js":"1","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\App.jsx":"2","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\context\\UserContext.jsx":"3","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\Register.jsx":"4","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\Header.jsx":"5","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\Login.jsx":"6","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\Table.jsx":"7","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\HospForm.js":"8","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\ErrorMessage.jsx":"9","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\pageprincipale.js":"10"},{"size":278,"mtime":1634135230000,"results":"11","hashOfConfig":"12"},{"size":1322,"mtime":1637327915714,"results":"13","hashOfConfig":"12"},{"size":831,"mtime":1637315672008,"results":"14","hashOfConfig":"12"},{"size":2795,"mtime":1637315419080,"results":"15","hashOfConfig":"12"},{"size":502,"mtime":1637326578982,"results":"16","hashOfConfig":"12"},{"size":2152,"mtime":1637313943135,"results":"17","hashOfConfig":"12"},{"size":3473,"mtime":1637323103644,"results":"18","hashOfConfig":"12"},{"size":12969,"mtime":1637322117568,"results":"19","hashOfConfig":"12"},{"size":169,"mtime":1634135230000,"results":"20","hashOfConfig":"12"},{"size":1499,"mtime":1637327424222,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1jnejeq",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\index.js",[],["45","46"],"C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\App.jsx",[],"C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\context\\UserContext.jsx",[],"C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\Register.jsx",[],"C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\Header.jsx",[],"C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\Login.jsx",[],"C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\Table.jsx",["47"],"import React, { useContext, useEffect, useState } from \"react\";\n\nimport ErrorMessage from \"./ErrorMessage\";\nimport HospForm from \"./HospForm\";\nimport { UserContext } from \"../context/UserContext\";\n\nconst Table = () => {\n  const [token] = useContext(UserContext);\n  const [patientforms, setPatientForms] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loaded, setLoaded] = useState(false);\n  const [activeModal, setActiveModal] = useState(false);\n  const [id, setId] = useState(null);\n\n  const handleUpdate = async (id) => {\n    setId(id);\n    setActiveModal(true);\n  };\n\n  const handleDelete = async (id) => {\n    const requestOptions = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      },\n    };\n    const response = await fetch(`/hospForm/form/${id}`, requestOptions);\n    if (!response.ok) {\n      setErrorMessage(\"Failed to delete lead\");\n    }\n\n    getPatientForms();\n  };\n\n  const getPatientForms = async () => {\n    const requestOptions = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      },\n    };\n    const response = await fetch(\"/hospForm/form\", requestOptions);\n    if (!response.ok) {\n      setErrorMessage(\"Something went wrong. Couldn't load the leads\");\n    } else {\n      const data = await response.json();\n      setPatientForms(data);\n      setLoaded(true);\n    }\n  };\n\n  useEffect(() => {\n    getPatientForms();;\n  }, []);\n\n  const handleModal = () => {\n    setActiveModal(!activeModal);\n    getPatientForms();;\n    setId(null);\n  };\n\n  return (\n    <>\n      <HospForm\n        active={activeModal}\n        handleModal={handleModal}\n        token={token}\n        id={id}\n        setErrorMessage={setErrorMessage}\n      />\n      <button\n        className=\"button is-fullwidth mb-5 is-primary\"\n        onClick={() => setActiveModal(true)}\n      >\n        Create a form\n      </button>\n      <ErrorMessage message={errorMessage} />\n      {loaded && patientforms ? (\n        <table className=\"table is-fullwidth\">\n          <thead>\n            <tr>\n              <th>Pr√©nom</th>\n              <th>Nom de famille</th>\n              <th>Email</th>\n              <th>Nom de l'hopital</th>\n              <th>Raison de visite</th>\n              <th>Date de visite</th>\n            </tr>\n          </thead>\n          <tbody>\n            {patientforms.map((patientform) => (\n              <tr key={patientform.id}>\n                <td>{patientform.first_name}</td>\n                <td>{patientform.last_name}</td>\n                <td>{patientform.email}</td>\n                <td>{patientform.hospitalName}</td>\n                <td>{patientform.causeHosp}</td>\n                <td>{patientform.dateHosp}</td>\n                <td>\n                  <button\n                    className=\"button mr-2 is-info is-light\"\n                    onClick={() => handleUpdate(patientform.id)}\n                  >\n                    Update\n                  </button>\n                  <button\n                    className=\"button mr-2 is-danger is-light\"\n                    onClick={() => handleDelete(patientform.id)}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>Loading</p>\n      )}\n    </>\n  );\n};\n\nexport default Table;\n","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\HospForm.js",["48"],"import React, { useEffect, useState } from \"react\";\n\nconst HospForm = ({ active, handleModal, token, id, setErrorMessage }) => {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [maidenName, setMaidenName] = useState(\"\");\n\n  //const [birthdayDate, setBirthdayDate] = useState(\"\");\n  const [birthdayDay, setBirthdayDay] = useState(\"\");\n  const [birthdayMonth, setBirthdayMonth] = useState(\"\");\n  const [birthdayYear, setBirthdayYear] = useState(\"\");\n\n  const [email, setEmail] = useState(\"\");\n\n  const [numberAddress, setNumberAddress] = useState(\"\")\n  const [nameAddress, setNameAddress] = useState(\"\")\n  const [postalCode, setPostalCode] = useState(\"\")\n  const [cityAddress, setCityAddress] = useState(\"\")\n  const [countryAddress, setCountryAddress] = useState(\"\")\n  \n  const [secuNumber, setSecuNumber] = useState(\"\")\n\n  const [hospitalName, setHospitalName] = useState(\"\")\n  const [causeHosp, setCauseHosp] = useState(\"\")\n\n\n  useEffect(() => {\n    const getPatientForm = async () => {\n      const requestOptions = {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + token,\n        },\n      };\n      const response = await fetch(`/hospForm/form/${id}`, requestOptions);\n\n      if (!response.ok) {\n        setErrorMessage(\"Questionnaire non disponible !\");\n      } else {\n        const data = await response.json();\n        setFirstName(data.first_name);\n        setLastName(data.last_name);\n        setMaidenName(data.maiden_name);\n\n        //setBirthdayDate(data.birthday_date);\n        setBirthdayDay(data.birthdayDay);\n        setBirthdayMonth(data.birthdayMonth);\n        setBirthdayYear(data.birthdayYear);\n        \n        setEmail(data.email);\n\n        setNumberAddress(data.numberAddress);\n        setNameAddress(data.nameAddress);\n        setPostalCode(data.postalCode);\n        setCityAddress(data.cityAddress);\n        setCountryAddress(data.countryAddress);\n\n        setSecuNumber(data.secuNumber);\n\n        setHospitalName(data.hospitalName);\n        setCauseHosp(data.causeHosp);\n      }\n    };\n\n    if (id) {\n      getPatientForm();\n    }\n  }, [id, token]);\n\n  const cleanFormData = () => {\n    setFirstName(\"\");\n    setLastName(\"\");\n    setMaidenName(\"\");\n\n    //setBirthdayDate(\"\");\n    setBirthdayDay(\"\");\n    setBirthdayMonth(\"\");\n    setBirthdayYear(\"\");\n\n\n    setEmail(\"\");\n\n    setNumberAddress(\"\");\n    setNameAddress(\"\");\n    setPostalCode(\"\");\n    setCityAddress(\"\");\n    setCountryAddress(\"\");\n\n    setSecuNumber(\"\");\n\n    setHospitalName(\"\");\n    setCauseHosp(\"\");\n    \n  };\n\n  const handleCreateLead = async (e) => {\n    e.preventDefault();\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      },\n      body: JSON.stringify({\n        first_name: firstName,\n        last_name: lastName,\n        maiden_name: maidenName,\n\n        //birthday_date: birthdayDate,\n        birthdayDay: birthdayDay,\n        birthdayMonth: birthdayMonth,\n        birthdayYear: birthdayYear,\n\n        email: email,\n\n        numberAddress: numberAddress,\n        nameAddress: nameAddress,\n        postalCode: postalCode,\n        cityAddress: cityAddress,\n        countryAddress: countryAddress,\n\n        secuNumber: secuNumber,\n\n        hospitalName: hospitalName,\n        causeHosp: causeHosp,\n      }),\n    };\n    const response = await fetch(\"/hospForm/form\", requestOptions);\n    if (!response.ok) {\n      setErrorMessage(\"Une erreur a √©t√© d√©tect√©e lors de la cr√©ation du formulaire\");\n    } else {\n      cleanFormData();\n      handleModal();\n    }\n  };\n\n  const handleUpdateLead = async (e) => {\n    e.preventDefault();\n    const requestOptions = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      },\n      body: JSON.stringify({\n        first_name: firstName,\n        last_name: lastName,\n        maiden_name: maidenName,\n\n        //birthday_date: birthdayDate,\n        birthdayDay: birthdayDay,\n        birthdayMonth: birthdayMonth,\n        birthdayYear: birthdayYear,\n\n        email: email,\n\n        numberAddress: numberAddress,\n        nameAddress: nameAddress,\n        postalCode: postalCode,\n        cityAddress: cityAddress,\n        countryAddress: countryAddress,\n\n        secuNumber: secuNumber,\n\n        hospitalName: hospitalName,\n        causeHosp: causeHosp,\n      }),\n    };\n    const response = await fetch(`/hospForm/form/${id}`, requestOptions);\n    if (!response.ok) {\n      setErrorMessage(\"Une erreur a √©t√© d√©tect√©e lors du chargement du formulaire\");\n    } else {\n      cleanFormData();\n      handleModal();\n    }\n  };\n\n  return (\n    <div className={`modal ${active && \"is-active\"}`}>\n      <div className=\"modal-background\" onClick={handleModal}></div>\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head has-background-primary-light\">\n          <h1 className=\"modal-card-title\">\n            {id ? \"T√©l√©charger un formulaire\" : \"Cr√©er un formulaire\"}\n          </h1>\n        </header>\n        <section className=\"modal-card-body\">\n          <form>\n            <div className=\"field\">\n              <label className=\"label\">Pr√©nom</label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Entrez votre pr√©nom\"\n                  value={firstName}\n                  onChange={(e) => setFirstName(e.target.value)}\n                  className=\"input\"\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Nom de famille</label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Entrez votre nom de famille\"\n                  value={lastName}\n                  onChange={(e) => setLastName(e.target.value)}\n                  className=\"input\"\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Nom pr√©c√©dent</label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Entrez votre nom de jeune fille\"\n                  value={maidenName}\n                  onChange={(e) => setMaidenName(e.target.value)}\n                  className=\"input\"\n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Jour de naissance</label>\n              <div className=\"control\">\n                <input\n                  type=\"int\"\n                  placeholder=\"JJ\"\n                  value={birthdayDay}\n                  onChange={(e) => setBirthdayDay(e.target.value)}\n                  className=\"input\"\n                  required               \n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Mois de naissance</label>\n              <div className=\"control\">\n                <input\n                  type=\"int\"\n                  placeholder=\"MM\"\n                  value={birthdayMonth}\n                  onChange={(e) => setBirthdayMonth(e.target.value)}\n                  className=\"input\"\n                  required               \n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Ann√©e de naissance</label>\n              <div className=\"control\">\n                <input\n                  type=\"int\"\n                  placeholder=\"YYYY\"\n                  value={birthdayYear}\n                  onChange={(e) => setBirthdayYear(e.target.value)}\n                  className=\"input\"\n                  required               \n                  />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Email</label>\n              <div className=\"control\">\n                <input\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"input\"\n                  required               \n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Num√©ro de rue</label>\n              <div className=\"control\">\n                <input\n                  type=\"int\"\n                  placeholder=\"Entrez votre num√©ro de rue\"\n                  value={numberAddress}\n                  onChange={(e) => setNumberAddress(e.target.value)}\n                  className=\"input\"\n                  required               \n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Nom de rue</label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Entrez votre nom de rue\"\n                  value={nameAddress}\n                  onChange={(e) => setNameAddress(e.target.value)}\n                  className=\"input\"\n                  required \n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Code Postal</label>\n              <div className=\"control\">\n                <input\n                  type=\"int\"\n                  placeholder=\"Entrez votre code postal\"\n                  value={postalCode}\n                  onChange={(e) => setPostalCode(e.target.value)}\n                  className=\"input\"\n                  required \n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Ville de r√©sidence</label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Entrez votre ville de r√©sidence\"\n                  value={cityAddress}\n                  onChange={(e) => setCityAddress(e.target.value)}\n                  className=\"input\"\n                  required \n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Pays de r√©sidence</label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Entrez votre pays de r√©sidence\"\n                  value={countryAddress}\n                  onChange={(e) => setCountryAddress(e.target.value)}\n                  className=\"input\"\n                  required \n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Num√©ro de s√©curit√© sociale</label>\n              <div className=\"control\">\n                <input\n                  type=\"int\"\n                  placeholder=\"Entrez votre num√©ro de s√©curit√© sociale\"\n                  value={secuNumber}\n                  onChange={(e) => setSecuNumber(e.target.value)}\n                  className=\"input\"\n                  required \n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Nom de l'hopital</label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Entrez le nom de l'hopital\"\n                  value={hospitalName}\n                  onChange={(e) => setHospitalName(e.target.value)}\n                  className=\"input\"\n                  required \n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Cause de votre visite</label>\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Entrez la cause de votre visite\"\n                  value={causeHosp}\n                  onChange={(e) => setCauseHosp(e.target.value)}\n                  className=\"input\"\n                  required \n                />\n              </div>\n            </div>\n          </form>\n        </section>\n        <footer className=\"modal-card-foot has-background-primary-light\">\n          {id ? (\n            <button className=\"button is-info\" onClick={handleUpdateLead}>\n              Update\n            </button>\n          ) : (\n            <button className=\"button is-primary\" onClick={handleCreateLead}>\n              Create\n            </button>\n          )}\n          <button className=\"button\" onClick={handleModal}>\n            Cancel\n          </button>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default HospForm;\n","C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\ErrorMessage.jsx",[],"C:\\Users\\Thoboom\\Documents\\fullstack-data-application\\frontend\\src\\components\\pageprincipale.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":56,"column":6,"nodeType":"55","endLine":56,"endColumn":8,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":69,"column":6,"nodeType":"55","endLine":69,"endColumn":17,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPatientForms'. Either include it or remove the dependency array.","ArrayExpression",["61"],"React Hook useEffect has a missing dependency: 'setErrorMessage'. Either include it or remove the dependency array. If 'setErrorMessage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"Update the dependencies array to be: [getPatientForms]",{"range":"67","text":"68"},"Update the dependencies array to be: [id, setErrorMessage, token]",{"range":"69","text":"70"},[1540,1542],"[getPatientForms]",[2193,2204],"[id, setErrorMessage, token]"]